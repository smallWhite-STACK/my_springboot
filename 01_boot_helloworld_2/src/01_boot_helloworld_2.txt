----------------------- 配置文件 -----------------------

1、文件类型
- properties
- yaml(非常适合用来做以数据为中心的配置文件)

    1.1yaml
        1.1.1基本语法
            ● key: value；kv之间有空格
            ● 大小写敏感
            ● 使用缩进表示层级关系
            ● 缩进不允许使用tab，只允许空格
            ● 缩进的空格数不重要，只要相同层级的元素左对齐即可
            ● '#'表示注释
            ● 字符串无需加引号，如果要加，''与""表示字符串内容 会被 转义/不转义
                ''  代表 \n不会换行，因此称为转义

    1.2数据类型
    - 字面量：单个的、不可再分的值。date、boolean、string、number、null
    - 对象：键值对的集合。map、hash、set、object
         行内写法：  k: {k1:v1,k2:v2,k3:v3}
         #或
         k:
         	k1: v1
            k2: v2
            k3: v3
    - 数组：一组按次序排列的值。array、list、queue
        行内写法：  k: [v1,v2,v3]
        #或者
        k:
         - v1
         - v2
         - v3


    1.3实例
        在之前，我们使用@ConfigurationProperties(prefix="")来将properties中的值对pojo类的属性进行配置绑定
        现在我们使用yaml文件（）进行配置绑定
            1.创建Pet Person
            2.application.yaml或者application.yml
            3.把Person放入容器中： @Component
            4.ConfigurationProperties(prefix="person")
            5.在yml中设置
                person:
                  #下面每个冒号后必须有空格
                       userName: zhangsan
                       boss: true
                       birth: 2016/12/12
                       age: 10
                       pet:
                         name: 小黑狗
                         weight: 12.25
                #       interests: [篮球,足球]
                       interests:
                         - 篮球
                         - 足球
                       animal: [阿猫,阿狗]
                       score: {english:80,math:90}
                       salarys:
                         - 9999
                         - 8888
                       allPets:
                         sick:
                           - {name: 啊驴,weight: 12.25}
                           - {name: 猪,weight: 122.5}
                           - name: 虫
                             weight: 12.00
                         health:
                           - {name: 阿花,weight: 12.25}
                           - {name: 阿媚,weight: 122.5}
            6.创建controller
                @RestController
                public class HelloController {

                    @Autowired
                    Person person;

                    @GetMapping("/person")
                    public Person hello(){
                        return  person;
                    }
                }
            7.启动测试
                http://localhost:8080/person


注意：
    错误:(4, 52) java: 无法访问org.springframework.beans.factory.annotation.Autowired
        错误的类文件: E:\apache-maven-3.5.4\repo\org\springframework\spring-beans\6.0.4\spring-beans-6.0.4.jar(org/springframework/beans/factory/annotation/Autowired.class)
        类文件具有错误的版本 61.0, 应为 52.0
        请删除该文件或确保该文件位于正确的类路径子目录中。
    该错误是在设置springboot版本时使用了version3，因此只需去pom.xml中修改版本和jdk版本即可

2.关于设置yaml文件时对于我们自定义类的水性进行提示的功能：
    1.在我们的自定义类Person上出现：
        Spring Boot Configuration Annotation Processor not found in classpath     Open Documentation...
    2.我们点击open Documentation
    3.The requested URL/spring-boot/docs/23.4RELEAE/reference/html/configuration-metadata.html was not found on this server.
    4.我们进入说明文档的：3.Configuration Metadata
        （3.1配置注解处理器Configuring the Annotation Processor）
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        ----------------------下面的这个不用加，因为本次实验springboot版本2.4.13中已经自动排除了------------------------------------------
         <build>
                <plugins>
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        ------------------上面是springboot的打包插件------------------
                        <configuration>
                            <excludes>
                                <exclude>
                                    <groupId>org.springframework.boot</groupId>
                                    <artifactId>spring-boot-configuration-processor</artifactId>
                                </exclude>
                            </excludes>
                        </configuration>
                        ------------------------加入上面的部分（意思是打包的时候不要打包配置处理器）------------------------------
                    </plugin>
                </plugins>
            </build>
    5.在自定义类Person中：
        Re-run Spring Boot Configuration Annotation Processor to update generated metadata
      Hide notification
        这是提示我们重启启动我们的应用


--------------------------
web开发（视频：22-59）：
springboot文档额springboot feature下的developing  web application
https://docs.spring.io/spring-boot/docs/2.4.13/reference/html/spring-boot-features.html#boot-features-developing-web-applications

    1.SpringMVC自动配置概览
    2.简单功能分析
     2.1、静态资源访问
        1、静态资源目录
        2、静态资源访问前缀
        3、webjar
     2.2、欢迎页支持
     2.3、自定义Favicon
     2.4、静态资源配置原理
        1、配置类只有一个有参构造器
        2、资源处理的默认规则
        3、欢迎页的处理规则
        4、favicon
    3.请求参数处理
     0、请求映射
        1、rest使用与原理
        2、请求映射原理
     1、普通参数与基本注解
        1.1、注解：
        1.2、Servlet AP:
        1.3、复杂参数：
        1.4、自定义对象参数：
     2、POO封装过程
     3、参数处理原理
        1、HandlerAdapter
        2、执行目标方法
        3、参数解析器-HandlerMeth(
        4、返回值处理器
        5、如何确定目标方法每一个参数的值
            5.1、挨个判断所有参数解析器那个支持解析这个参数
            5.2、解析这个参数的值
            5.3、自定义类型参数 封装POJO
        6、目标方法执行完成
        7、处理派发结果
    4.数据响应与内容协商
     1、响应SON
        1.1.jackson.jar+@ResponseBody
            1、返回值解析器
            2、返回值解析器原理
        1.2、SpringMVC到底支持哪些返回值
        1.3、HTTPMessageConverter原理
            1、MessageConverter规范
            2、默认的MessageConverter
     2、内容协商
        1、引入xml依赖
        2、postman分别测试返回json和xml
        3、开启浏览器参数方式内容协商功能
        4、内容协商原理
        5、自定义 MessageConverter
    5.视图解析与模板引擎
     1、视图解析
        1、视图解析原理流程
     2、模板擎-Thymeleaf
        1、thymeleaf简个
        2、基本语法
            1、表达式
            2、字面量
            3、文本操作
            4、数学运算
            5、布尔运算
            6、比较运算
            7、条件运算
            8、特殊操作
        3、设置属性值-th:attr
        4、迭代
        5、条件运算
        6、属性优先级
     3、thymeleaff使用
        1、引入Starter
        2、自动配置好了thymeleaf
        3、页面开发
     4、构建后台管理系统
         1、项目创建
         2、静态资源处理
         3、路径构建
         4、模板抽取
         5、页面跳转
         6、数据渲染
    6、拦截器
        1、HandlerInterceptor接☐
        2、配置拦截器
        3、拦载截器原理

    7、文件上传
        1、页面表单
        2、文件上传代码
        3、自动配置原理
    8、异常处理
     1、错误处理
        1、默认规则
        2、定制错误处理逻辑
        3、异常处理自动配置原理
        4、异常处理步骤流程
    9、Web原生组件注入（Servlet、Filter、Listener）
        1、使用Servlet API
        2、使用RegistrationBean
    10、嵌入式Servlet容器
        1、切换嵌入式Servlet容器
        2、定制Servlet容器
    11、定制化原理
        1、定制化的常见方式
        2、原理分析套路