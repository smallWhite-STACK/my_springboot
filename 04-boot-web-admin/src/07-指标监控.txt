1.SpringBoot Actuator
    未来每一个微服务在云上部署以后，我们都需要对其进行监控、追踪、审计、控制等。
    SpringBoot就抽取了Actuator场景，使得我们每个微服务快速引用即可获得生产级别的应用监控、审计等功能。

    1. 1.x与2.x的不同
           Spring Boot Actuator 1.x                Spring Boot Actuator 2.x
            ●支持SpringMVC                           ●支持SpringMVC、JAX-RS以及Webflux
            ●基于继承方式进行扩展                      ●注解驱动进行扩展
            ●层级Metrics配置                          ●层级&名称空间Metrics
            ●自定义Metrics收集                        ●底层使用MicroMeter（非常方便我们自定义一些监控功能）,强大、便捷
            ●默认较少的安全策略                        ●默认丰富的安全策略

    2、如何使用（官方文档Spring boot actuator）
        ●引入场景
            引入依赖（spring-boot-starter-actuator）
                    <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-actuator</artifactId>
                    </dependency>
        ●访问 http://localhost:8080/actuator/
            {
              "_links": {
                "self": {
                  "href": "http://localhost:8080/actuator",
                  "templated": false
                },
                "health-path": {
                  "href": "http://localhost:8080/actuator/health/{*path}",
                  "templated": true
                },
                "health": {
                  "href": "http://localhost:8080/actuator/health",
                  "templated": false
                },
                "info": {
                  "href": "http://localhost:8080/actuator/info",
                  "templated": false
                }
              }
            }

            默认springboot会开放两个指标health、info ，（health、info 也称为EndPoints）
            测试：
                1.我们访问：http://localhost:8080/actuator/health   健康状况
                 结果为：  {"status":"DOWN"}
                2.我们访问：http://localhost:8080/actuator/info    当前应用的详细信息
                 结果为： {}
                3.其他的EndPoint
                    http://localhost:8080/actuator/beans
                    http://localhost:8080/actuator/configprops
                    http://localhost:8080/actuator/metrics
                    http://localhost:8080/actuator/metrics/jvm.gc.pause
                    http://localhost:8080/actuator/endpointName/detailPath
        ●暴露所有监控信息为HTTP
        management:
          endpoints:
            web:
              exposure:
                include: "*"            #以web方式暴露
            enabled-by-default: true   #暴露所有端点信息，默认就是true

2、Actuator Endpoint

    1、最常使用的端点
            ID	                        描述
        auditevents	        暴露当前应用程序的审核事件信息。需要一个AuditEventRepository组件。
        beans	            显示应用程序中所有Spring Bean的完整列表。
        caches	            暴露可用的缓存。
        conditions	        显示自动配置的所有条件信息，包括匹配或不匹配的原因。
        configprops	        显示所有@ConfigurationProperties。
        env	                暴露Spring的属性ConfigurableEnvironment
        flyway	            显示已应用的所有Flyway数据库迁移。
                                需要一个或多个Flyway组件。
        health	            显示应用程序运行状况信息。
        httptrace	        显示HTTP跟踪信息（默认情况下，最近100个HTTP请求-响应）。需要一个HttpTraceRepository组件。
        info	            显示应用程序信息。
        integrationgraph	显示Spring integrationgraph 。需要依赖spring-integration-core。
        loggers	            显示和修改应用程序中日志的配置。
        liquibase	        显示已应用的所有Liquibase数据库迁移。需要一个或多个Liquibase组件。
        metrics	            显示当前应用程序的“指标”信息。
        mappings	        显示所有@RequestMapping路径列表。
        scheduledtasks	    显示应用程序中的计划任务。
        sessions	        允许从Spring Session支持的会话存储中检索和删除用户会话。需要使用Spring Session的基于Servlet的Web应用程序。
        shutdown	        使应用程序正常关闭。默认禁用。
        startup	            显示由ApplicationStartup收集的启动步骤数据。需要使用SpringApplication进行配置BufferingApplicationStartup。
        threaddump	        执行线程转储。

    2.如果您的应用程序是Web应用程序（Spring MVC，Spring WebFlux或Jersey），则可以使用以下附加端点：
        ID	                描述
        heapdump	    返回hprof堆转储文件。
        jolokia	        通过HTTP暴露JMX bean（需要引入Jolokia，不适用于WebFlux）。需要引入依赖jolokia-core。
        logfile	        返回日志文件的内容（如果已设置logging.file.name或logging.file.path属性）。支持使用HTTPRange标头来检索部分日志文件的内容。
        prometheus	    以Prometheus服务器可以抓取的格式公开指标。需要依赖micrometer-registry-prometheus。
    3.尽管默认出shutdown（Endpoint）是关闭的，其他EndPoint是开启的，但是默认开启的监控模式是
        springboot底层有两种监控模式：
            JMX(JMX（Java Management Extensions，即Java管理扩展)
                和
            HTTP
            默认所有
        支持的暴露方式
            ● HTTP：默认只暴露health和info Endpoint
            ● JMX：默认暴露所有Endpoint
            ● 除过health和info，剩下的Endpoint都应该进行保护访问。如果引入SpringSecurity，则会默认配置安全访问规则

            在window中，我们安装java后，可以在终端使用jconsole
                然后连接我们当前运行的项目，点击MBean


3.最常用的Endpoint
  ● Health：监控状况
  ● Metrics：运行时指标
  ● Loggers：日志记录
            ---------------------------------------------------------------------------------
  1.Health Endpoint
    健康检查端点，我们一般用于在云平台，平台会定时的检查应用的健康状况，我们就需要Health Endpoint可以为平台返回当前应用的一系列组件健康状况的集合。
    重要的几点：
    ● health endpoint返回的结果，应该是一系列健康检查后的一个汇总报告
    ● 很多的健康检查默认已经自动配置好了，比如：数据库、redis等
    ● 可以很容易的添加自定义的健康检查机制
                                    （快速排除redis的东西
                                        1. @SpringBootApplication(exclude = RedisAutoConfiguration.class)
                                        2.去把所有相关的Autowired和自定义拦截器以及配置拦截器等的注解关闭）
    ---------------------------------------------------------------------------------
    因为访问http://localhost:8080/actuator/health如果健康或者不健康时只返回一个up或者down
    我们整合了mybatis\数据库、数据源等等，我们可以在配置文件针对单个endPoint（endpoints是对所有的）去配置
    ---------------------------------------------------------------------------------
        具体配置某个endpoint格式：
            management.endpoint.端点名.xxx
    ---------------------------------------------------------------------------------
    management:
      endpoints:
        web:
          exposure:
            include: "*"
        enabled-by-default: true
      endpoint:
        health:
          show-details: always
    ------------------------------
    详细结果
        {
          "status": "UP",
          "components": {
            "db": {
              "status": "UP",
              "details": {
                "database": "MySQL",
                "validationQuery": "isValid()"
              }
            },
            "diskSpace": {
              "status": "UP",
              "details": {
                "total": 314572795904,
                "free": 170096619520,
                "threshold": 10485760,
                "exists": true
              }
            },
            "ping": {
              "status": "UP"
            }
          }
        }
            ---------------------------------------------------------------------------------
    2.Metrics Endpoint
      提供详细的、层级的、空间指标信息，
        这些信息可以被pull（主动推送）或者  push（被动获取）方式得到；
      ● 通过Metrics对接多种监控系统
      ● 简化核心Metrics开发
      ● 添加自定义Metrics或者扩展已有Metrics

      http://localhost:8080/actuator/metrics
        结果有很多的指标，如果我们想看详细的结果，还需要发二次请求：
            例如：http://localhost:8080/actuator/metrics/http.server.requests

    3.管理Endpoints
      1、开启与禁用Endpoints
      ● 默认所有的Endpoint除过shutdown都是开启的。
      ● 需要开启或者禁用某个Endpoint。配置模式为  management.endpoint.<endpointName>.enabled = true
        management:
          endpoint:
            beans:
              enabled: true
      ● 或者禁用所有的Endpoint然后手动开启指定的Endpoint
        management:
          endpoints:
            enabled-by-default: false
          endpoint:
            beans:
              enabled: true
            health:
              enabled: true

4.定制 Endpoint
    1、定制 Health 信息（implements HealthIndicator）
        分析：在我们访问health时有一些信息：例如diskSpace
            class DiskSpaceHealthIndicator extends AbstractHealthIndicator
            public abstract class AbstractHealthIndicator implements HealthIndicator
            因此收到这个类的影响，我们与实现接口AbstractHealthIndicator
        实现：
            1.类名字是有要求的，必须以HealthIndicator结尾
                public class MyComHealthIndicator extends AbstractHealthIndicator
            2.实现方法doHealthCheck
            3.@Component
            注意MyComHealthIndicator去掉HealthIndicator就是组件的名字
            4.结果：
                myCom:
                    status:	"UP"
                    details:
                        code:	20
                        ms:	    1000
                        count:	1
               ---------------------------------
              代码                                   @Component
                                                    public class MyComHealthIndicator extends AbstractHealthIndicator {
                                                        @Override
                                                        protected void doHealthCheck(Health.Builder builder) throws Exception {
                                                            HashMap<String, Object> map = new HashMap<>();

                                                            if(1==1){
                                                                builder.up();
                                                                //我们返回一些信息
                                                                map.put("count", 1);
                                                                map.put("ms", 1000);
                                                            }else{
                                                                builder.down();
                                                                //
                                                                map.put("ms", 30000);
                                                                map.put("err", "连接失败");
                                                            }
                                                            builder.withDetail("code",20)
                                                            .withDetails(map);

                                                        }
                                                    }

    2、定制info信息（当前应用的详细信息）
        常用两种方式
        方式1、编写配置文件
            info:
              xjAppName: boot-admin
              xjAppVersion: 0.0.1
              mavenProjectName: @project.artifactId@
              mavenProjectVersion: @project.version@     //这个@@可以从pom.xml中获取标签的值
        方式2、编写InfoContributor
            步骤：
                1.创建MyComInfo implements InfoContributor
                2.实现方法contribute
                3.Component注解
                ----------------------
                @Component
                public class MyComInfo implements InfoContributor {
                    @Override
                    public void contribute(Info.Builder builder) {
                            builder.withDetail("username", "张三").withDetail("age", "32")
                            .withDetails(Collections.singletonMap("sex", "male"));
                        }
                }

    3、定制Metrics信息（指标信息）
        1、SpringBoot支持自动适配的Metrics
            1、SpringBoot支持自动适配的Metrics
                ● JVM metrics, report utilization of:
                  ○ Various memory and buffer pools
                  ○ Statistics related to garbage collection
                  ○ Threads utilization
                  ○ Number of classes loaded/unloaded      类加载
                ● CPU metrics
                ● File descriptor metrics 磁盘空间
                ● Kafka consumer and producer metrics  第三方
                ● Log4j2 metrics: record the number of events logged to Log4j2 at each level
                ● Logback metrics: record the number of events logged to Logback at each level
                ● Uptime metrics: report a gauge for uptime and a fixed gauge representing the application’s absolute start time
                ● Tomcat metrics (server.tomcat.mbeanregistry.enabled must be set to true for all Tomcat metrics to be registered)
                ● Spring Integration metrics

        2、增加定制Metrics
            案例代码：
                方式1：
                    我们在service层（一般是Impl加入下面的代码）使用一个参数MeterRegistry meterRegistry
                    class MyService{
                        Counter counter;
                        public MyService(MeterRegistry meterRegistry){
                            //counter是计数类方法，参数是自定义的（即你计数的这个参数名字）
                             counter = meterRegistry.counter("cityService.savecity.count");
                        }

                        public void 该方法就是我们serviceImpl对应的方法() {
                            counter.increment(); //该方法调用一次增加一次
                            。。。
                        }
                    }
                    ---------------------------------------------------------------
                    我们实现一下记录调用queryCity的次数
                        代码：
                            1.去cityService中添加
                                    @Service
                                    public class CityService {
                                        Counter counter;
                                        @Autowired
                                        CityMapper cityMapper;
                                        public CityService(MeterRegistry meterRegistry){
                                            counter = meterRegistry.counter("cityService.savecity.count");

                                        }
                                        public City queryCity(Long id){
                                            counter.increment();
                                            City city = cityMapper.queryCity(id);
                                            return city;

                                        }
                              2.测试：
                                我们访问：http://localhost:8080/querycity
                                然后去访问:http://localhost:8080/actuator/metrics/cityService.savecity.count
                    ---------------------------------------------------------------
                 方式2：
                    //也可以使用下面的方式
                    @Bean
                    MeterBinder queueSize(Queue queue) {
                        return (registry) -> Gauge.builder("queueSize", queue::size).register(registry);
                    }

    4、完全定制Endpoint(注解@Endpoint、@ReadOperation、@WriteOperation)
        场景：开发ReadinessEndpoint来管理程序是否就绪，或者LivenessEndpoint来管理程序是否存活；
        当然，这个也可以直接使用
            https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-kubernetes-probes


        @Component
        @Endpoint(id = "container")
        public class DockerEndpoint {


            @ReadOperation
            public Map getDockerInfo(){
                return Collections.singletonMap("info","docker started...");
            }

            @WriteOperation
            private void restartDocker(){
                System.out.println("docker restarted....");
            }

        }
        实验：
            1.自定义一个类
            2.使用注解@Endpoint(id = "命名自己的Endpoint")
            3.使用Component
            4.@ReadOperation修饰自己写的getXxx方法（不能有参数）
                ReadOperation称为读方法，就是当我们访问http://localhost:8080/我们自定义的EndPoint名字时展示的数据
            5.@WriteOperation

            6.测试：
                访问：http://localhost:8080/actuator/xjendpoint 看看页面展示的是不是我们在@ReadOperation对应的方法设置的数据
  更多自定义的信息：
    官方文档：Spring Boot Actuator:--》8.1. Custom HTTP tracing

5.整合一个可视化界面spring-boot-admin
    https://github.com/codecentric/spring-boot-admin
    这是官方spring-boot-admin的地址

    实验：（按照快速开始）
        我们是要引入一个可视化界面监控我们04-boot-web-admin这个项目
        .1. 设置一个Spring Boot Admin Server
            - 解释：我们写好的微服务（暴露Actuator信息（类似我们上面讲的）），
                我们的Admin Server每隔一段时间回去要每一个微服务的监控指标，然后展示在一个大盘页面上
            创建一个新项目（04-boot-web-adminmoniter（只需引入web场景））
        2.在04-boot-web-adminmoniter中引入依赖
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-starter-server</artifactId>
                <version>2.5.1</version>
            </dependency>
        3.在04-boot-web-adminmoniter主程序类上加上注解：@EnableAdminServer
        4.考虑到我们微服务项目已经占用端口8080，因此我们需要修改04-boot-web-adminmoniter的端口号
        5.访问http://localhost:8888/
        6.此时需要开始考虑如何将我们的微服务信息往这个04-boot-web-adminmoniter中加入
            6.1注册客户端Registering Client Applications
                1.在客户端04-boot-web-admin<中引入
                    <dependency>
                        <groupId>de.codecentric</groupId>
                        <artifactId>spring-boot-admin-starter-client</artifactId>
                        <version>2.5.1</version>
                    </dependency>
                    下面呢这个是安全框架（我们暂时不使用）
                    <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-security</artifactId>
                    </dependency>
                2.在04-boot-web-admin中配置说明04-boot-web-adminmoniter的访问地址
                    spring.boot.admin.client.url=http://localhost:8888
                    management.endpoints.web.exposure.include=*
            6.2全部运行，去访问http://localhost:8888/
                1.看看是否监控到我们的项目
                2.看看项目名字和地址
                    名字：（默认） spring-boot-application
                    项目地址：http://DESKTOP-7BJ18P1:8080/
                3.如果说我们的项目被观察为离线：
                    - 我们需要去04-boot-web-admin设置
                        spring.boot.admin.client.instance,prefer-ip=true
                    - 为我们当前项目起一个名字（不然默认值是：spring-boot-application）
                        spring,application,name:04-boot-web-admin
