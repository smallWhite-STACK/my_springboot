1.springboot实现helloworld
    1.0创建maven工程
    1.1引入依赖配置：创建POM -- spring-boot-starter-parent（parent标签，代表使用springboot）
    1.2引入依赖配置：spring-boot-starter-web（dependencies标签，代表针对web场景）
    1.3创建主程序类（@SpringBootApplication）
    1.4编写业务
    1.5运行&测试
    1.6设置配置（简化配置）(properties配置文件)
    1.7打包部署（简化部署）spring-boot-maven-plugin(build标签)
------------------------------------------------------------------------------------
    我们进入springboot的getting started中的"Developing Your First Spring Boot Application"
    1.0创建maven工程
    1.1引入依赖配置：创建POM
        即我们创建一个项目，让其使用springboot
    1.2引入依赖配置：添加系统的依赖（spring-boot-starter-web）
        针对web场景导入的依赖
    1.3创建主程序类
        注解：@SpringBootApplication
        在main方法中调用SpringApplication.run(主程序类的class对象,args)
    1.4编写业务
        controller等
        这里补充一下，当我们从服务器向浏览器返回字符串时，我们需要使用@ResponseBody
        再加上controller层需要注解@Controller，此时我们可以将两个注解使用@RestController替换
    1.5运行&测试
        我们只需在main方法中点击运行，不需要以往配置tocamt等操作，非常简单
        我们此时去访问：http://localhost:8080/hello
    1.6设置配置（简化配置）
        与以往不同，使用springboot我们只需要一个配置文件，位置就在
            src/main/resources/application.properties
            例如：
                # 设置端口号
                server.port=8888
            此时需要访问：http://localhost:8888/hello
      （该配置可以写什么：去参考官方文档的application properties）
    1.7打包部署（简化部署）
     相比以往ssm中的打包部署，springboot的更为简单
        1.引入spring-boot-maven-plugin 添加到 pom.xml 中
            之前porn.xml中需要<packing>war</packing>，然后把这个配置到服务器上
            但是springboot我们可以去getting started中的"Developing Your First Spring Boot Application"
                                    的“Creating an Executable Jar”
            - 要创建一个可执行的 jar，我们需要将 spring-boot-maven-plugin 添加到 pom.xml 中
            - spring-boot-maven-plugin插件
        2.在maven的lifecycle中执行package
        3.我们来到项目的target中就可以看到一个jar包（名字中包含自己的项目名和单词snapshot）
        4.在idea中需要停止该项目，然后使用cmd进入该项目所在位置，执行
            jar tvf target/`自己的项目名字`-`好像是版本号`-SNAPSHOT.jar
        5.去访问http://localhost:8888/hello即可
2.注意
    a)推荐关闭cmd的快速编辑模式
    b)如果idea中依赖下来不全，我们需要多次去maven中点击刷新图标
3.springboot得到的jar包分析
    - BOOT-INF
        - lib(这个目录中就是所有依赖的jar包)
        - classes(就是我们自己所写的程序的位置)
            - com.xjws.....
            - application.properties
        - classpath.idx
    - META-INF
    - org
---------------------------------------- 一：SpringBoot特点：依赖管理、自动配置-----------------------------------------------------
4.SpringBoot特点：依赖管理（关于sprigBoot的pom.xml中引入的标签作用）
    1.parent
    ● 父项目做依赖管理（自动版本仲裁）
    ● 使用了parent代表该项目继承了spring-boot-starter-parent，我们只要在这说明了父项目的版本，之后引入的都不需要写版本号
    ● 进入spring-boot-starter-parent中发现他也有父项目
        <parent>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-dependencies</artifactId>
            <version>2.4.13</version>
        </parent>
        进入spring-boot-dependencies中的<properties>中几乎声明了所有开发中常用的jar包的所有版本
    ● 如果不想使用版本仲裁（自定义版本信息）
        1、查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。
        2、在当前项目里面重写配置
            我们以数据库为例
            我们直接在自己的pron.xml中加入
                <properties>
                    <mysql.version>版本号（可以去网站：mvn re中找）</mysql.version>
                </properties>
    2.starter(开发导入starter场景启动器)
        我们到官方文档的using spring boot的1.5（starters）可以查看解释
        1、见到很多 spring-boot-starter-* ： *就某种场景
        2、只要引入starter，这个场景的所有常规需要的依赖我们都自动引入
        3、SpringBoot所有支持的场景
            https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter
        4、见到的  *-spring-boot-starter：
            第三方为我们提供的简化开发的场景启动器。
        5、所有场景启动器最底层的依赖
            <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter</artifactId>
              <version>2.3.4.RELEASE</version>
              <scope>compile</scope>
            </dependency>
5.自动配置
    ● 自动配好Tomcat
      ○ 引入Tomcat依赖。（依赖管理已经完成了）
      ○ 配置Tomcat
    ● 自动配好SpringMVC
      ○ 引入SpringMVC全套组
      ○ 自动配好SpringMVC常用组件（功能）
      注：
        （我们在主程序类(主配置类)中的run 的返回值是一个ConfigureApplicationContext ioc对象（这就是ioc容器））
        我们可以使用ioc.getBeanDefinitionNames()-->String[] names;查看容器内的组件
    ● 自动配好Web常见功能，如：字符编码问题
      ○ SpringBoot帮我们配置好了所有web开发的常见场景（(例如：过滤器、servlet、视图解析器等)）
    ● 默认的包结构（官方文档：Using springboot--下的2.1Using the “default” Package）
        （之前ssm我们使用注解+扫描的方式，但是现在我们不需要扫描，只需使用默认包结构   ）
      ○ `主程序`所在包及其下面的所有子包里面的组件都会被默认扫描进来
      ○ 无需以前的包扫描配置
      ○ 想要改变扫描路径(即如果我们的包不在主程序的包或者子包下时)，
        ■ 方式1：@SpringBootApplication(scanBasePackages="com.atguigu")
        ■ 方式2：@ComponentScan 指定扫描路径
        --------------------------------------
                    @SpringBootApplication
                等同于
                    @SpringBootConfiguration
                    @EnableAutoConfiguration
                    @ComponentScan("com.atguigu.boot")
        --------------------------------------
        以上两种方式的注解都是修饰主程序类
    ● 各种配置拥有默认值
      ○ 默认配置最终都是映射到某个类上，
            如：文件上传MultipartProperties
      ○ 配置文件的值最终会绑定每个类上，这个类会在容器中创建对象
    ● 按需加载所有自动配置项
      ○ 非常多的starter
      ○ 引入了哪些场景这个场景的自动配置才会开启
      ○ SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面
      ○
    ● ......
----------------------------------------SpringBoot特点：end-----------------------------------------------------
----------------------------------------二：容器功能-----------------------------------------------------

目录：
    1.组件添加
        @Configuration
        @Bean、@Component、@Controller、@Service、@Repository
        @ComponentScan、@Import
        @Conditional 条件装配
    2.原生配置文件引入
        @ImportResource
    3.配置绑定
        @ConfigurationProperties
        @EnableConfigurationProperties + @ConfigurationProperties
        @Component + @ConfigurationProperties

1.组件添加
    1.1@Configuration 和 @Bean
        - @Configuration告诉SpringBoot这是一个配置类 == 配置文件
        - @Bean //给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例
                        ==============================================================================================================
                        /**
                         * 1、配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单实例的
                         * 2、配置类本身也是组件
                         * 3、proxyBeanMethods：代理bean的方法
                         *      Full(proxyBeanMethods = true)、【保证每个@Bean方法被调用多少次返回的组件都是单实例的】
                         *      Lite(proxyBeanMethods = false)【每个@Bean方法被调用多少次返回的组件都是新创建的】
                         *      组件依赖必须使用Full模式默认。其他默认是否Lite模式
                         */
                        @Configuration(proxyBeanMethods = true)//告诉SpringBoot这是一个配置类 == 配置文件
                        public class MyConfig {
                        //    public Person user01(){
                        //        return new Person("张三",18);
                        //    }
                            @Bean  //我们可以使用@Bean("自定义名字组件id")
                            public Person user01(){
                                Person p = new Person("张三", 18);
                                p.setPet(pet01());
                                return p;
                            }
                            @Bean
                            public Pet pet01(){
                                return new Pet("欢欢");
                            }
                        }
                        ==============================================================================================================
                        @SpringBootApplication
                        public class MainApplication {
                            public static void main(String[] args) {
                                //1.获取ioc容器
                                ConfigurableApplicationContext ioc = SpringApplication.run(MainApplication.class, args);
                                //2、查看容器里面的组件
                                String[] names = ioc.getBeanDefinitionNames();
                                for (String name : names) {
                                    System.out.println(name);
                                }
                                //3、从容器中获取组件
                                    //3.1验证是否单例
                                Person bean1 = ioc.getBean(Person.class);
                                Person bean2 = ioc.getBean(Person.class);
                                System.out.println(bean1==bean2);   //true
                                    //3.2、配置类本身也是ioc中的组件，也可以获取
                                MyConfig bean = ioc.getBean(MyConfig.class);
                                System.out.println(bean);  //com.xjws.boot.config.MyConfig$$EnhancerBySpringCGLIB$$327a7f7d@470a9030

                                    //3.3如果@Configuration(proxyBeanMethods = true)代理对象调用方法。SpringBoot总会检查这个组件是否在容器中有。
                                        //保持组件单实例
                                        //通过3.2获取的配置类对象，然后直接调用其中的被@Bean修饰的方法，我们发现仍然是单例
                                Person user = bean.user01();
                                Person user1 = bean.user01();
                                System.out.println(user == user1);   //true

                                    //3.4我们在Person中加上属性：Pet pet,并且在配置类中重写user01方法（在user01中调用pet01）
                                        //通过结果可以看出仍然是单例
                                Person user01 = ioc.getBean("user01", Person.class);
                                Pet tom = ioc.getBean("pet01", Pet.class);

                                System.out.println("用户的宠物："+(user01.getPet() == tom));

                            }
                        }
                        ==============================================================================================================
    1.2 @Import 可以标注组件
        @Import({User.class, DBHelper.class})
            给容器中自动创建出这两个类型的组件
            默认组件的名字就是全类名
    1.3 @Conditional条件装配（可以标注方法 、 类）
        满足Conditional指定的条件，则进行组件注入
            ConditionalOnBean当容器中存在某些组件时才进行组件注入
            ConditionalOnMissingBean当容器中不存在某些组件时才进行组件注入
            ConditionalOnClass当容器中存在某些类时才进行组件注入
            ConditionalOnMissingClass当容器中不存在某些类时才进行组件注入
            ConditionalOnResource当容器中存在某些资源时才进行组件注入
            ConditionalOnJava当容器中满足java版本号时才进行组件注入
            ConditionalOnWebApplication当应用是web应用时
            ConditionalOnNotWebApplication当应用不是web应用时
            ConditionalOnProperty当配置文件配置了某个属性时
            ConditionalOnSingleCandidate当容器指定的组件只有一个实例时（或者多个实例但是有一个主实例）
         应用实例：
            比如一个Person对象，其有一个属性pet
            此时，我们在配置类中设置了一个bean获取person,但是我们要求用户从容器中获取pet，如果不能获取也就不要注册组件person01
            此时我们就可以使用ConditionalOnBean条件装配
            ===========================================================================================
                        @Configuration(proxyBeanMethods = true)//告诉SpringBoot这是一个配置类 == 配置文件
                        public class MyConfig {
                            @ConditionalOnBean(name = "pet01")(也可以修饰到配置类上)（加到类上，如果满足，类中的所有组件才会被注册）
                            @Bean
                            public Person user01(){
                                Person p = new Person("张三", 18);
                                p.setPet(pet01());  //注意pet01没有被设置为组件
                                return p;
                            }

                            public Pet pet01(){
                                return new Pet("欢欢");
                            }
                        }
            ===========================================================================================
2.原生配置文件引入（@ImportResource）
    对于xml配置的bean,此时如果我们不想将xml迁移为配置类，则我们只需在某一个配置类上写上：
        @ImportResource("classpath:beans.xml")  //导入Spring的配置文件，
    此时我们在从ioc容器获取这些bean时就可以成功获取
3.配置绑定
    3.1第一种办法：ConfigurationProperties+Controller
        解释：因为我们的一个properties文件中配置的东西可能很多，其中又可以分布一部分一部分的，比如：
            我们有一个Car，car中有两个属性brand和price，此时我们想通过配置文件配置属性的值
            -------------------
               操作1：
                    car.brand=byd
                    car.price=100000
             -------------------
                此时我们只需在类Car中写上
               -------------------
               操作2：
                    @Controller   //因为只有在容器中才能使用springboot的强大功能
                    @ConfigurationProperties(prefix="car")
                 -------------------
    3.2第二种方法：ConfigurationProperties+EnableConfigurationProperties
        解释：是在配置类中设置
        @EnableConfigurationProperties(Car.class)
                功能：
                    1.开启car的属性配置功能
                    2.把car这个组件自动注册到ioc容器
        VS 第一种：
            不需要注解@Component（比如当Car是第三方类时，这个时候就使用第二种方法）
                -----------------------
                操作：
                    1.properties文件中
                                car.brand=byd
                                car.price=100000
                    2.类Car
                    3.使用ConfigurationProperties(prefix="car")修饰
                    4.在配置类中使用@EnableConfigurationProperties(Car.class)即可

                -----------------------
----------------------------------------二：容器功能：end-----------------------------------------------------
----------------------------------------三：自动配置原理入门（源码分析）-----------------------------------------------------
 目录：
        -----------------
        1.引导加载自动配置类
            @SpringBootConfiguration
            @ComponentScan
            @EnableAutoConfiguration
                @AutoConfigurationPackage
                @Import(AutoConfigurationImportSelector.class)
        2.按需开启自动配置项
        3.修改默认配置
        4.最佳实践
-   ---------------------------------
1.@SpringBootApplication源码解析
    1.SpringBootApplication相当于下面三个注解
        @SpringBootConfiguration    --->代表当前是一个配置类Configuration
        @EnableAutoConfiguration
        @ComponentScan(             --->指定扫描哪些，Spring注解；
                excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),
                @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })
        public @interface SpringBootApplication{}

    2.@EnableAutoConfiguration注解
        @AutoConfigurationPackage   --->自动配置包？指定了默认的包规则（就是我们把主程序下组件进行注册（自动的））
        @Import({AutoConfigurationImportSelector.class})
    3.@AutoConfigurationPackage注解
        @Import({Registrar.class})   --》给容器中导入一个组件
        我们进入Registrar,发现其内部有两个方法：
                （利用Registrar给容器中导入一系列组件）
            1.void registerBeanDefinitions
            2.Set<Object> determineImports
               ----源码如下----------------------------------------
                    public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) {
                        AutoConfigurationPackages.register(registry, (String[])(new AutoConfigurationPackages.PackageImports(metadata)).getPackageNames().toArray(new String[0]));
                    }
                    - 函数的参数：AnnotationMetadata对应的注解是AutoConfigurationPackage，而这个AnnotationMetadata本身是元信息
                    其包含注解标识位置、每一个属性值
                        标识位置（introspectedClass）是我们的主程序类MainApplication
                    - (new AutoConfigurationPackages.PackageImports(metadata)).getPackageNames()这一步我们通过IDEA的“计算表达式”功能
                    计算结果为：com.xjws.boot（主类的包名）
                    - toArray(new String[0]) 把包名封装到一个数组中去
                    - 然后通过包名使用register批量注册
                    ----因此相当于我们的Registrar相当于把我们某个包（main程序所在的包下）下面的所有组件批量注册

                                --------------------------------

                    public Set<Object> determineImports(AnnotationMetadata metadata) {
                        return Collections.singleton(new AutoConfigurationPackages.PackageImports(metadata));
                    }
                    //
                    //将指定的一个包下的所有组件导入进来？MainApplication 所在包下。
                ----------------------------------------------------
    4.@Import({AutoConfigurationImportSelector.class})
      利用selector机制给容器中在导入一些东西

        1、selectImports方法（说明导入哪些东西）中使用的getAutoConfigurationEntry（得到所有自动配置的集合），利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件
            我们在getAutoConfigurationEntry方法声明处打上断点，我们进入后有一个：
            getCandidateConfigurations方法返回一个List<String> configurations（这个list长度127）
        2、调用List<String> configurations = getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类
            我们可以进入getCandidateConfigurations方法内部发现：SpringFactoriesLoader.loadFactoryNames
            使用Spring工厂加载器来加载一些东西
            我们进入方法loadFactoryNames，发现loadSpringFactories方法，进入该方法：
                private static Map<String, List<String>> loadSpringFactories(ClassLoader classLoader)
        3、利用工厂加载 Map<String, List<String>> loadSpringFactories(@Nullable ClassLoader classLoader)；得到所有的组件
        4、进入loadSpringFactories方法中，发现其从META-INF/spring.factories位置来加载一个文件。
           默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件
           spring-boot-autoconfigure-2.3.4.RELEASE.jar包里面也有META-INF/spring.factories
    5、按需开启自动配置项
        - 虽然我们127个场景的所有自动配置启动的时候默认全部加载。xxxxAutoConfiguration
        - 但是我们是按需开启：
            按照条件装配规则（@Conditional），最终会按需配置。
        - 使用ioc.getBeanDefinitionCount()获取ioc容器中的组件个数
         5.1分析AopAutoConfiguration是否生效
            我们进入AopAutoConfiguration看见：
                @ConditionalOnProperty(prefix = "spring.aop", name = "auto", havingValue = "true", matchIfMissing = true)
                该条件装配ConditionalOnProperty表示配置文件是否存在前缀为spring.aop的配置，
                并且如果存在spring.aop.auto=true则就会将下面的组件在ioc中配置
                matchIfMissing为true表示即使spring.aop.auto没配置，我也认为你配置了并且其值为true

                然后在AopAutoConfiguration中我们看见两个类：
                1.
                        @Configuration(proxyBeanMethods = false)  配置类
                    	@ConditionalOnClass(Advice.class)
                    	static class AspectJAutoProxyingConfiguration {
                  我们看到AspectJAutoProxyingConfiguration想要被注册，看你整个应用例是否存在Advice
                  Advice是在包import org.aspectj.weaver.Advice（因为我们没有导入aop场景，所以这个包没有导入）

                2.
                        @Configuration(proxyBeanMethods = false)  配置类
                    	@ConditionalOnMissingClass("org.aspectj.weaver.Advice")
                    	@ConditionalOnProperty(prefix = "spring.aop", name = "proxy-target-class", havingValue = "true",
                    			matchIfMissing = true)
                    	static class ClassProxyingConfiguration {
                  ConditionalOnMissingClass当你没有org.aspectj.weaver.Advice这个类时
                  ConditionalOnProperty代表配置文件存在spring.aop.proxy-target-class=true,如果是就生效，又因为matchIfMissing为true，则默认就认为spring.aop.proxy-target-class=true
         5.2分析web下的DispatcherServletAutoConfiguration是否生效
                @AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)
                @Configuration(proxyBeanMethods = false)        配置类
                @ConditionalOnWebApplication(type = Type.SERVLET)
                @ConditionalOnClass(DispatcherServlet.class)
                @AutoConfigureAfter(ServletWebServerFactoryAutoConfiguration.class)
                public class DispatcherServletAutoConfiguration {
                    ConditionalOnWebApplication判断当前是不是web应用，type = Type.SERVLET表示类型是原生的servlet的web应用，
                    因为springboot2支持两种web模式开发：原生servlet\响应式编程
                   其内部还有一些方法：
                    @Bean
                    @ConditionalOnBean(MultipartResolver.class)  //容器中有这个类型组件
                    @ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME) //容器中没有这个名字 multipartResolver 的组件
                    public MultipartResolver multipartResolver(MultipartResolver resolver) {
                        //☆☆☆：给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。
                        //SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范
                        // Detect if the user has created a MultipartResolver but named it incorrectly
                        return resolver;
                    }


        6、修改默认配置
            SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先
                例如：@ConditionalOnMissingBean（表示该组件没有注册时，底层帮你配）
            总结：
            ● SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration
            ● 每个自动配置类按照条件进行生效，默认都会绑定配置文件properties指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定
            ● 生效的配置类就会给容器中装配很多组件
            ● 只要容器中有这些组件，相当于这些功能就有了
            ● 定制化配置
              ○ 第一种：用户直接自己@Bean替换底层的组件
              ○ 第二种：用户去看这个组件是获取的配置文件什么值就去修改（直接去properties中定义即可）。
            xxxxxAutoConfiguration ---> 组件  ---> xxxxProperties里面拿值  ----> application.properties

2.最佳实践
    ● 引入场景依赖（starter）
      ○ https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter
    ● 查看自动配置了哪些（选做）
      ○ 方式1：自己分析，引入场景对应的自动配置一般都生效了
      ○ 方式2：配置文件(application.properties)中debug=true开启自动配置报告。Negative（不生效）\Positive（生效）
    ● 是否需要修改
      ○ 参照文档修改配置项
        ■ https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties
        ■ 自己分析。xxxxProperties绑定了配置文件的哪些。
            实例：我们以修改banner图为例（springboot启动图）
                1.把新的图像放到resource下
                2.去官方文档（Application properties/Core properties）中找到key -- spring.banner.image.location
                3.将这个key配置到application.properties中
      ○ 自定义加入或者替换组件
        ■ @Bean、@Component。。。
      ○ 自定义器  XXXXXCustomizer；
      ○ ......
----------------------------------------三：自动配置原理入门：end-----------------------------------------------------
----------------------------------------四：开发小技巧-----------------------------------------------------
 目录：
    1.Lombok
    2.dev-tools
    3.Spring Initailizr（项目初始化向导）
        选择我们需要的开发场景
        自动依赖引入
        自动创建项目结构
        自动编写好主配置类
    -------------------------

1.Lombok---简化JavaBean开发
     第一步：导入依赖
                lombok在springboot中存在默认管理的版本（在pom.xml中点击parent中再次点击spring-boot-dependencies）
                    <lombok.version>1.18.22</lombok.version>
                将依赖复制到pom.xml中
     第二步：安装插件（重启idea）
     第三步：使用lombok
                使用注解@Data放在对应pojo类上（我么就不需要写getter、setter），此时我们定义的属性由灰色变为其他色，代表成功
                使用注解@ToString（重写toString）
                使用注解@AllArgsConstructor @NoArgsConstructor(全参、无参构造器)
                    如果需要定制构造器，则可以自己声明
                使用注解@EqualsAndHashCode(重写equal和hashcode)
                使用注解@Slf4j（注入日志类），（我们在控制台不需要sout,而是使用属性log）
                    例如：log.info("开始")
     例如：
        @Data
        @AllArgsConstructor
        @NoArgsConstructor
        @ToString
        @EqualsAndHashCode
        @Slf4j
        @ConfigurationProperties(prefix = "car")  //配置绑定
        public class Car {
            private Integer price;
            private String brand;

        }

2.dev-tools（自动重启）
    我们到官方文档的using-spring-boot/Developer Tools下将依赖（spring-boot-devtools）导入

    项目或者页面修改以后：Ctrl+F9；（其实就是Build下的‘构建项目’）

    好处：如果我们只修改静态页面，我们这个方式不会重启，只需替换页面

3.Spring Initailizr（项目初始化向导）

    自动依赖引入
    自动创建项目结构
    自动编写好主配置类

步骤：
    1.我们在IDEA新建项目时选择Spring Initailizr
        group    com.xjws.boot
        artifact 项目名字
        type (暂时我们选择maven(默认是gradle))
        language
        packaging
        java version 版本选择
        version
        name     项目名字
        description
        package  com.xjws.boot
    2.选择我们需要的开发场景（springboot版本，各种依赖）
    3.工程目录
       - 当上面的type选择gradle时
                .gradle(文件夹)
                gradle(文件夹)
                src(文件夹)
                    - main(文件夹)
                    -    - java(文件夹)
                    -    -    - com.xjws.boot.Application.java
                    -    - resources(文件夹)
                    -         - static(文件夹)
                    -         - templates(文件夹)
                    -         - application.properties
                    - test(文件夹)
                          - java(文件夹)
                              - com.xjws.boot.ApplicationTests.java
                .gitignore
                build.gradle
                gradlew
                gradlew.bat
                HELP.md
                settings.gradle
       - 当上面的type选择maven时
                src(文件夹)
                    - main(文件夹)
                    -    - java(文件夹)
                    -    -    - com.xjws.boot.Application.java
                    -    - resources(文件夹)
                    -         - static(文件夹)（静态资源）
                    -         - templates(文件夹)（页面）
                    -         - application.properties
                    - test(文件夹)
                          - java(文件夹)
                              - com.xjws.boot.ApplicationTests.java
                 pom.xml
                 .mvn(文件夹)可删除
                 .gitignore 可删除
                 HELP.md    可删除
                 mvnw       可删除
                 mvnw.cmd   可删除

----------------------------------------四：开发小技巧：end-----------------------------------------------------
---------------------------------------------------------------------------------------------
核心功能：
    配置文件​
    web开发
    数据访问
    单元测试
    指标监控
    原理解析
---------------------------------------------------------------------------------------------













